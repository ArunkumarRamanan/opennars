options{
  STATIC = false;
}

PARSER_BEGIN(Parser)
package wam.parser;   
import wam.datastructures.StringContainer;
import java.util.ArrayList;
/**
 * The parser (that acts as part of the compiler) to convert <code>String</code> objects to WAM heaps.
 * 
 * @author Bas Testerink, Utrecht University, The Netherlands
 * 
 */
public class Parser {
 private ToHeap toHeap = null;
 public ToHeap getToHeap(){return toHeap;}
 public void setToHeap(ToHeap th){ this.toHeap = th; }
}
PARSER_END(Parser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  "%" : IN_SINGLE_LINE_COMMENT_STD_PROLOG
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT_STD_PROLOG>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT_STD_PROLOG: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_SINGLE_LINE_COMMENT_STD_PROLOG,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        ["0"-"9"] (["0"-"9"])* (["s","S","f","F"])? 
  >
| 
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ ("." (["0"-"9"])+)?  (["f","F"])? 
  >
| 
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )+
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < STD_IDENTIFIER: (["a"-"z","@","!"] (["a"-"z","A"-"Z","0"-"9","_"])*)>
| < VAR_IDENTIFIER: ["A"-"Z","_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < NOTSPACE: "not " >
}

/* OPERATORS */

TOKEN :
{
  < ADD: "+" >
| < RULEIMPLY: ":-" >
| < SUBTRACT: "-" >
| < IMPLY: "->" >
| < MULTIPLY: "*" >
| < POWER: "**" >
| < DIVIDE: "/" > 
| < BITAND: "/\\" >
| < UNIFICATION: "=" >
| < ARITHUNIF: "=:=" >
| < ARITHNOTUNIF: "=\\=" >
| < EQLT: "=<" >
| < TERMDECOMPOSITION: "=.." >
| < EQUALS: "==" >
| < BACKSLASH: "\\" >
| < NOT: "\\+" >
| < BITOR: "\\/" >
| < NOTUNIFIABLE: "\\=" >
| < NOTEQUALS: "\\==" > 
| < TERMGTEQ: "@>=" >
| < TERMEQLT: "@=<" >
| < TERMLT: "@<" >
| < TERMGT: "@>" >
| < TERMEQ: "@==" >
| < TERMNEQ: "@\\=" >
| < LT: "<" >
| < SHIFTLEFT: "<<" >
| < GT: ">" >
| < SHIFTRIGHT: ">>" >
| < GTEQ: ">=" >
| < ASSIGN: " is " >
| < POWER2: "^" >
| < XOR: " xor " >
| < REMAINDER: " rem " >
| < INTDIVIDE: " div " >
| < MODULO: " mod " >
| < COLON: ":" >
| < BAR: "|" >
| < NORMIMPLY: "=>" >
| < NORMAND: "and " >
| < DOLLAR: "$" >
| < QUESTION: "?" >
| < AMP: "&" >
}  
/* PROLOG */

// Argument of a predicate or list. 
void Argument() :
{}
{
	(LOOKAHEAD(Infix())Infix()|LOOKAHEAD(Number())Number()|Predicate()|Var()|List())
}
	
// Number. Ends with s if simple, will be stored as doubles otherwise.
void Number() :
{Token t=null,t2;}
{
	[t=<SUBTRACT>](t2=<INTEGER_LITERAL>|t2=<FLOATING_POINT_LITERAL>)
	{toHeap.addNum((t!=null?t.image:"")+t2.image);}
}
 
// Predicate. Also includes constants.
void Predicate() :
{Token name=null; String nameToPL= "";}
{	// Let the to heap converter know that a new structure is in the make.
	{toHeap.initiatePrologStructure();}
	
	// Negation by means of "not x"
	(LOOKAHEAD(3) ("not " {nameToPL="not";} Predicate()) |
	
	// Standard predicate/constant beginning with a name, and possible followed by arguments
	((name=<STD_IDENTIFIER>|name=<CHARACTER_LITERAL>|name=Operator()) {nameToPL=name.image;}
	[<LPAREN> Argument() (<COMMA> Argument())* <RPAREN>]) | 
	
	// Parenthesized content such as the argument of "p((x,y))".
	(<LPAREN> Argument() {nameToPL=",";} (<COMMA> Argument())* <RPAREN>))
	
	// Let the to heap converter know that this structure is finished and pass the functor name.
	{toHeap.finishStructure(nameToPL);}
}  

// Get the used operator.
Token Operator() :
{Token t;}
{
	(t=<ADD>|t=<SUBTRACT>|t=<IMPLY>|t=<MULTIPLY>|t=<POWER>|
	t=<DIVIDE>|t=<BITAND>|t=<UNIFICATION>|t=<ARITHUNIF>|	t=<ARITHNOTUNIF>|t=<EQLT>|t=<TERMDECOMPOSITION>|t=<EQUALS>|
	t=<BACKSLASH>|t=<BITOR>|t=<NOTUNIFIABLE>|t=<NOTEQUALS>|	t=<TERMGTEQ>|t=<TERMEQLT>|t=<TERMLT>|t=<TERMGT>|t=<TERMEQ>|
	t=<TERMNEQ>|t=<LT>|t=<SHIFTLEFT>|t=<GT>|t=<SHIFTRIGHT>|
	t=<GTEQ>|t=<ASSIGN>|t=<POWER2>|t=<XOR>|t=<REMAINDER>|
	t=<INTDIVIDE>|t=<MODULO>|t=<COLON>|t=<NORMAND>|t=<NOTSPACE>|
	t=<SEMICOLON>|t=<NOT>|t=<RULEIMPLY>) {return t;}
}  
 
// Possible body parts of a rule.
void Bodypart() :
{}
{
	(LOOKAHEAD(Infix())Infix()|Predicate()|Var())
}

// An infix operator is stored as a prefix predicate. E.g. "1 + 2" = "+(1,2)". Uses left hand preference:
// "1 + 2 + 3" = "+(1,+(2,3))".
void Infix() :
{Token name;}
{   // Start the building of a structure.
	{toHeap.initiatePrologStructure();}
	
	// Get the two arguments and the name.
	(LOOKAHEAD(Number())Number()|Predicate()|Var()|List()) name=Operator() Argument()
	
	// Wrap up the predicate.
	{toHeap.finishStructure(name.image);}
}   

// Parse lists, not that []  is also parsed as a list rather than a constant.
void List() :
{int c = 0;}
{   
	// Initiate a structure and start with "["
	{toHeap.initiatePrologStructure();}
	<LBRACKET>
	
	// For each argument (if any) after the first we have to start a new structure because lists are stored as
	// lineair tree's of pairs. Then get the tail specification if present.
	[(LOOKAHEAD(3)(Argument()(<COMMA>{toHeap.initiatePrologStructure();c++;} Argument())*[<BAR>(List()|Var())])
	
	// Case with one argument. Needed for parsing choice points. 
	|LOOKAHEAD(3)(Argument() [<BAR> (List()|Var())]))]
	
	// Closing bracket "]".
	<RBRACKET>
	
	// For each argument we create a new structure, new we have to close all of them as being lists.
	{for(int i=0; i<=c; i++)toHeap.finishList();}
}  

// Variable.
void Var() :
{Token name;}
{
	name=<VAR_IDENTIFIER> {toHeap.addVar(name.image);}
}

// A rule. These are stored on the heap as :-(head,bodypt1,bodypt2...) if there is a body involved.
void Rule() :
{}
{   {toHeap.startRule();} 
	(LOOKAHEAD(Predicate()<RULEIMPLY>)(
	// Initiate the structure for :-
	{toHeap.initiatePrologStructure();}
	
	// The head
	Predicate()
	
	// The body
	<RULEIMPLY> Bodypart() (<COMMA> Bodypart())*
	
	// Wrap it up
	{toHeap.finishStructure(":-");}
	)|
	// Fact
	Predicate())
	
	// Closing dot and finish the rule
	<DOT> {toHeap.finishRule();}
}
 
void Query() :
{}
{	{toHeap.startQuery();}
	<QUESTION>
	// Initiate the structure for :-
	{toHeap.initiatePrologStructure();} 
	// The body
	Bodypart() (<COMMA> Bodypart())* <DOT>
	// Wrap it up
	{toHeap.finishStructure(":-");toHeap.finishQuery();}
}

void Directive() : 
{Token t=null,t2=null; ArrayList<String> arguments = new ArrayList<String>();}
{
	<RULEIMPLY> 
	(((t=<STD_IDENTIFIER>[<DIVIDE> t2=<INTEGER_LITERAL>])|(t=<INTEGER_LITERAL>))
	{arguments.add(t.image+(t2==null?"":("/"+t2.image))); t2=null;})* <DOT> 
	{toHeap.addDirective(arguments);}
} 
 
// A Prolog base is a series of rules.
void Prolog() :
{}
{
	(LOOKAHEAD(3)Directive()|Rule())* <EOF>
}