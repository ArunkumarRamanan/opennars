/* Generated By:JavaCC: Do not edit this line. Parser.java */
package nars.jwam.parser;

import java.util.ArrayList;

/**
 * The parser (that acts as part of the compiler) to convert <code>String</code>
 * objects to WAM heaps.
 *
 * @author Bas Testerink, Utrecht University, The Netherlands
 *
 */
public class Parser implements ParserConstants {

    private ToHeap toHeap = null;

    public ToHeap getToHeap() {
        return toHeap;
    }

    public void setToHeap(ToHeap th) {
        this.toHeap = th;
    }

    /* PROLOG */
// Argument of a predicate or list. 
    final public void Argument() throws ParseException {
        if (jj_2_1(2147483647)) {
            Infix();
        } else if (jj_2_2(2147483647)) {
            Number();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHARACTER_LITERAL:
                case STD_IDENTIFIER:
                case LPAREN:
                case SEMICOLON:
                case NOTSPACE:
                case ADD:
                case RULEIMPLY:
                case SUBTRACT:
                case IMPLY:
                case MULTIPLY:
                case POWER:
                case DIVIDE:
                case BITAND:
                case UNIFICATION:
                case ARITHUNIF:
                case ARITHNOTUNIF:
                case EQLT:
                case TERMDECOMPOSITION:
                case EQUALS:
                case BACKSLASH:
                case NOT:
                case BITOR:
                case NOTUNIFIABLE:
                case NOTEQUALS:
                case TERMGTEQ:
                case TERMEQLT:
                case TERMLT:
                case TERMGT:
                case TERMEQ:
                case TERMNEQ:
                case LT:
                case SHIFTLEFT:
                case GT:
                case SHIFTRIGHT:
                case GTEQ:
                case ASSIGN:
                case POWER2:
                case XOR:
                case REMAINDER:
                case INTDIVIDE:
                case MODULO:
                case COLON:
                case NORMAND:
                    Predicate();
                    break;
                case VAR_IDENTIFIER:
                    Var();
                    break;
                case LBRACKET:
                    List();
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

// Number. Ends with s if simple, will be stored as doubles otherwise.
    final public void Number() throws ParseException {
        Token t = null, t2;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case SUBTRACT:
                t = jj_consume_token(SUBTRACT);
                break;
            default:
                jj_la1[1] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case INTEGER_LITERAL:
                t2 = jj_consume_token(INTEGER_LITERAL);
                break;
            case FLOATING_POINT_LITERAL:
                t2 = jj_consume_token(FLOATING_POINT_LITERAL);
                break;
            default:
                jj_la1[2] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        toHeap.addNum((t != null ? t.image : "") + t2.image);
    }

// Predicate. Also includes constants.
    final public void Predicate() throws ParseException {
        Token name = null;
        String nameToPL = "";
        toHeap.initiatePrologStructure();
        if (jj_2_3(3)) {
            jj_consume_token(NOTSPACE);
            nameToPL = "not";
            Predicate();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHARACTER_LITERAL:
                case STD_IDENTIFIER:
                case SEMICOLON:
                case NOTSPACE:
                case ADD:
                case RULEIMPLY:
                case SUBTRACT:
                case IMPLY:
                case MULTIPLY:
                case POWER:
                case DIVIDE:
                case BITAND:
                case UNIFICATION:
                case ARITHUNIF:
                case ARITHNOTUNIF:
                case EQLT:
                case TERMDECOMPOSITION:
                case EQUALS:
                case BACKSLASH:
                case NOT:
                case BITOR:
                case NOTUNIFIABLE:
                case NOTEQUALS:
                case TERMGTEQ:
                case TERMEQLT:
                case TERMLT:
                case TERMGT:
                case TERMEQ:
                case TERMNEQ:
                case LT:
                case SHIFTLEFT:
                case GT:
                case SHIFTRIGHT:
                case GTEQ:
                case ASSIGN:
                case POWER2:
                case XOR:
                case REMAINDER:
                case INTDIVIDE:
                case MODULO:
                case COLON:
                case NORMAND:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case STD_IDENTIFIER:
                            name = jj_consume_token(STD_IDENTIFIER);
                            break;
                        case CHARACTER_LITERAL:
                            name = jj_consume_token(CHARACTER_LITERAL);
                            break;
                        case SEMICOLON:
                        case NOTSPACE:
                        case ADD:
                        case RULEIMPLY:
                        case SUBTRACT:
                        case IMPLY:
                        case MULTIPLY:
                        case POWER:
                        case DIVIDE:
                        case BITAND:
                        case UNIFICATION:
                        case ARITHUNIF:
                        case ARITHNOTUNIF:
                        case EQLT:
                        case TERMDECOMPOSITION:
                        case EQUALS:
                        case BACKSLASH:
                        case NOT:
                        case BITOR:
                        case NOTUNIFIABLE:
                        case NOTEQUALS:
                        case TERMGTEQ:
                        case TERMEQLT:
                        case TERMLT:
                        case TERMGT:
                        case TERMEQ:
                        case TERMNEQ:
                        case LT:
                        case SHIFTLEFT:
                        case GT:
                        case SHIFTRIGHT:
                        case GTEQ:
                        case ASSIGN:
                        case POWER2:
                        case XOR:
                        case REMAINDER:
                        case INTDIVIDE:
                        case MODULO:
                        case COLON:
                        case NORMAND:
                            name = Operator();
                            break;
                        default:
                            jj_la1[3] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    nameToPL = name.image;
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case LPAREN:
                            jj_consume_token(LPAREN);
                            Argument();
                            label_1:
                            while (true) {
                                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                    case COMMA:
              ;
                                        break;
                                    default:
                                        jj_la1[4] = jj_gen;
                                        break label_1;
                                }
                                jj_consume_token(COMMA);
                                Argument();
                            }
                            jj_consume_token(RPAREN);
                            break;
                        default:
                            jj_la1[5] = jj_gen;
                            ;
                    }
                    break;
                case LPAREN:
                    jj_consume_token(LPAREN);
                    Argument();
                    nameToPL = ",";
                    label_2:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case COMMA:
            ;
                                break;
                            default:
                                jj_la1[6] = jj_gen;
                                break label_2;
                        }
                        jj_consume_token(COMMA);
                        Argument();
                    }
                    jj_consume_token(RPAREN);
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        toHeap.finishStructure(nameToPL);
    }

// Get the used operator.
    final public Token Operator() throws ParseException {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ADD:
                t = jj_consume_token(ADD);
                break;
            case SUBTRACT:
                t = jj_consume_token(SUBTRACT);
                break;
            case IMPLY:
                t = jj_consume_token(IMPLY);
                break;
            case MULTIPLY:
                t = jj_consume_token(MULTIPLY);
                break;
            case POWER:
                t = jj_consume_token(POWER);
                break;
            case DIVIDE:
                t = jj_consume_token(DIVIDE);
                break;
            case BITAND:
                t = jj_consume_token(BITAND);
                break;
            case UNIFICATION:
                t = jj_consume_token(UNIFICATION);
                break;
            case ARITHUNIF:
                t = jj_consume_token(ARITHUNIF);
                break;
            case ARITHNOTUNIF:
                t = jj_consume_token(ARITHNOTUNIF);
                break;
            case EQLT:
                t = jj_consume_token(EQLT);
                break;
            case TERMDECOMPOSITION:
                t = jj_consume_token(TERMDECOMPOSITION);
                break;
            case EQUALS:
                t = jj_consume_token(EQUALS);
                break;
            case BACKSLASH:
                t = jj_consume_token(BACKSLASH);
                break;
            case BITOR:
                t = jj_consume_token(BITOR);
                break;
            case NOTUNIFIABLE:
                t = jj_consume_token(NOTUNIFIABLE);
                break;
            case NOTEQUALS:
                t = jj_consume_token(NOTEQUALS);
                break;
            case TERMGTEQ:
                t = jj_consume_token(TERMGTEQ);
                break;
            case TERMEQLT:
                t = jj_consume_token(TERMEQLT);
                break;
            case TERMLT:
                t = jj_consume_token(TERMLT);
                break;
            case TERMGT:
                t = jj_consume_token(TERMGT);
                break;
            case TERMEQ:
                t = jj_consume_token(TERMEQ);
                break;
            case TERMNEQ:
                t = jj_consume_token(TERMNEQ);
                break;
            case LT:
                t = jj_consume_token(LT);
                break;
            case SHIFTLEFT:
                t = jj_consume_token(SHIFTLEFT);
                break;
            case GT:
                t = jj_consume_token(GT);
                break;
            case SHIFTRIGHT:
                t = jj_consume_token(SHIFTRIGHT);
                break;
            case GTEQ:
                t = jj_consume_token(GTEQ);
                break;
            case ASSIGN:
                t = jj_consume_token(ASSIGN);
                break;
            case POWER2:
                t = jj_consume_token(POWER2);
                break;
            case XOR:
                t = jj_consume_token(XOR);
                break;
            case REMAINDER:
                t = jj_consume_token(REMAINDER);
                break;
            case INTDIVIDE:
                t = jj_consume_token(INTDIVIDE);
                break;
            case MODULO:
                t = jj_consume_token(MODULO);
                break;
            case COLON:
                t = jj_consume_token(COLON);
                break;
            case NORMAND:
                t = jj_consume_token(NORMAND);
                break;
            case NOTSPACE:
                t = jj_consume_token(NOTSPACE);
                break;
            case SEMICOLON:
                t = jj_consume_token(SEMICOLON);
                break;
            case NOT:
                t = jj_consume_token(NOT);
                break;
            case RULEIMPLY:
                t = jj_consume_token(RULEIMPLY);
                break;
            default:
                jj_la1[8] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) {
                return t;
            }
        }
        throw new Error("Missing return statement in function");
    }

// Possible body parts of a rule.
    final public void Bodypart() throws ParseException {
        if (jj_2_4(2147483647)) {
            Infix();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHARACTER_LITERAL:
                case STD_IDENTIFIER:
                case LPAREN:
                case SEMICOLON:
                case NOTSPACE:
                case ADD:
                case RULEIMPLY:
                case SUBTRACT:
                case IMPLY:
                case MULTIPLY:
                case POWER:
                case DIVIDE:
                case BITAND:
                case UNIFICATION:
                case ARITHUNIF:
                case ARITHNOTUNIF:
                case EQLT:
                case TERMDECOMPOSITION:
                case EQUALS:
                case BACKSLASH:
                case NOT:
                case BITOR:
                case NOTUNIFIABLE:
                case NOTEQUALS:
                case TERMGTEQ:
                case TERMEQLT:
                case TERMLT:
                case TERMGT:
                case TERMEQ:
                case TERMNEQ:
                case LT:
                case SHIFTLEFT:
                case GT:
                case SHIFTRIGHT:
                case GTEQ:
                case ASSIGN:
                case POWER2:
                case XOR:
                case REMAINDER:
                case INTDIVIDE:
                case MODULO:
                case COLON:
                case NORMAND:
                    Predicate();
                    break;
                case VAR_IDENTIFIER:
                    Var();
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

// An infix operator is stored as a prefix predicate. E.g. "1 + 2" = "+(1,2)". Uses left hand preference:
// "1 + 2 + 3" = "+(1,+(2,3))".
    final public void Infix() throws ParseException {
        Token name;
        toHeap.initiatePrologStructure();
        if (jj_2_5(2147483647)) {
            Number();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHARACTER_LITERAL:
                case STD_IDENTIFIER:
                case LPAREN:
                case SEMICOLON:
                case NOTSPACE:
                case ADD:
                case RULEIMPLY:
                case SUBTRACT:
                case IMPLY:
                case MULTIPLY:
                case POWER:
                case DIVIDE:
                case BITAND:
                case UNIFICATION:
                case ARITHUNIF:
                case ARITHNOTUNIF:
                case EQLT:
                case TERMDECOMPOSITION:
                case EQUALS:
                case BACKSLASH:
                case NOT:
                case BITOR:
                case NOTUNIFIABLE:
                case NOTEQUALS:
                case TERMGTEQ:
                case TERMEQLT:
                case TERMLT:
                case TERMGT:
                case TERMEQ:
                case TERMNEQ:
                case LT:
                case SHIFTLEFT:
                case GT:
                case SHIFTRIGHT:
                case GTEQ:
                case ASSIGN:
                case POWER2:
                case XOR:
                case REMAINDER:
                case INTDIVIDE:
                case MODULO:
                case COLON:
                case NORMAND:
                    Predicate();
                    break;
                case VAR_IDENTIFIER:
                    Var();
                    break;
                case LBRACKET:
                    List();
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        name = Operator();
        Argument();
        toHeap.finishStructure(name.image);
    }

// Parse lists, not that []  is also parsed as a list rather than a constant.
    final public void List() throws ParseException {
        int c = 0;
        toHeap.initiatePrologStructure();
        jj_consume_token(LBRACKET);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STD_IDENTIFIER:
            case VAR_IDENTIFIER:
            case LPAREN:
            case LBRACKET:
            case SEMICOLON:
            case NOTSPACE:
            case ADD:
            case RULEIMPLY:
            case SUBTRACT:
            case IMPLY:
            case MULTIPLY:
            case POWER:
            case DIVIDE:
            case BITAND:
            case UNIFICATION:
            case ARITHUNIF:
            case ARITHNOTUNIF:
            case EQLT:
            case TERMDECOMPOSITION:
            case EQUALS:
            case BACKSLASH:
            case NOT:
            case BITOR:
            case NOTUNIFIABLE:
            case NOTEQUALS:
            case TERMGTEQ:
            case TERMEQLT:
            case TERMLT:
            case TERMGT:
            case TERMEQ:
            case TERMNEQ:
            case LT:
            case SHIFTLEFT:
            case GT:
            case SHIFTRIGHT:
            case GTEQ:
            case ASSIGN:
            case POWER2:
            case XOR:
            case REMAINDER:
            case INTDIVIDE:
            case MODULO:
            case COLON:
            case NORMAND:
                if (jj_2_6(3)) {
                    Argument();
                    label_3:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case COMMA:
            ;
                                break;
                            default:
                                jj_la1[11] = jj_gen;
                                break label_3;
                        }
                        jj_consume_token(COMMA);
                        toHeap.initiatePrologStructure();
                        c++;
                        Argument();
                    }
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case BAR:
                            jj_consume_token(BAR);
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case LBRACKET:
                                    List();
                                    break;
                                case VAR_IDENTIFIER:
                                    Var();
                                    break;
                                default:
                                    jj_la1[12] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        default:
                            jj_la1[13] = jj_gen;
                            ;
                    }
                } else if (jj_2_7(3)) {
                    Argument();
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case BAR:
                            jj_consume_token(BAR);
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case LBRACKET:
                                    List();
                                    break;
                                case VAR_IDENTIFIER:
                                    Var();
                                    break;
                                default:
                                    jj_la1[14] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        default:
                            jj_la1[15] = jj_gen;
                            ;
                    }
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                break;
            default:
                jj_la1[16] = jj_gen;
                ;
        }
        jj_consume_token(RBRACKET);
        for (int i = 0; i <= c; i++) {
            toHeap.finishList();
        }
    }

// Variable.
    final public void Var() throws ParseException {
        Token name;
        name = jj_consume_token(VAR_IDENTIFIER);
        toHeap.addVar(name.image);
    }

// A rule. These are stored on the heap as :-(head,bodypt1,bodypt2...) if there is a body involved.
    final public void Rule() throws ParseException {
        toHeap.startRule();
        if (jj_2_8(2147483647)) {
            toHeap.initiatePrologStructure();
            Predicate();
            jj_consume_token(RULEIMPLY);
            Bodypart();
            label_4:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case COMMA:
          ;
                        break;
                    default:
                        jj_la1[17] = jj_gen;
                        break label_4;
                }
                jj_consume_token(COMMA);
                Bodypart();
            }
            toHeap.finishStructure(":-");
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHARACTER_LITERAL:
                case STD_IDENTIFIER:
                case LPAREN:
                case SEMICOLON:
                case NOTSPACE:
                case ADD:
                case RULEIMPLY:
                case SUBTRACT:
                case IMPLY:
                case MULTIPLY:
                case POWER:
                case DIVIDE:
                case BITAND:
                case UNIFICATION:
                case ARITHUNIF:
                case ARITHNOTUNIF:
                case EQLT:
                case TERMDECOMPOSITION:
                case EQUALS:
                case BACKSLASH:
                case NOT:
                case BITOR:
                case NOTUNIFIABLE:
                case NOTEQUALS:
                case TERMGTEQ:
                case TERMEQLT:
                case TERMLT:
                case TERMGT:
                case TERMEQ:
                case TERMNEQ:
                case LT:
                case SHIFTLEFT:
                case GT:
                case SHIFTRIGHT:
                case GTEQ:
                case ASSIGN:
                case POWER2:
                case XOR:
                case REMAINDER:
                case INTDIVIDE:
                case MODULO:
                case COLON:
                case NORMAND:
                    Predicate();
                    break;
                default:
                    jj_la1[18] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        jj_consume_token(DOT);
        toHeap.finishRule();
    }

    final public void Query() throws ParseException {
        toHeap.startQuery();
        jj_consume_token(QUESTION);
        toHeap.initiatePrologStructure();
        Bodypart();
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
        ;
                    break;
                default:
                    jj_la1[19] = jj_gen;
                    break label_5;
            }
            jj_consume_token(COMMA);
            Bodypart();
        }
        jj_consume_token(DOT);
        toHeap.finishStructure(":-");
        toHeap.finishQuery();
    }

    final public void Directive() throws ParseException {
        Token t = null, t2 = null;
        ArrayList<String> arguments = new ArrayList<String>();
        jj_consume_token(RULEIMPLY);
        label_6:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case STD_IDENTIFIER:
        ;
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    break label_6;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STD_IDENTIFIER:
                    t = jj_consume_token(STD_IDENTIFIER);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case DIVIDE:
                            jj_consume_token(DIVIDE);
                            t2 = jj_consume_token(INTEGER_LITERAL);
                            break;
                        default:
                            jj_la1[21] = jj_gen;
                            ;
                    }
                    break;
                case INTEGER_LITERAL:
                    t = jj_consume_token(INTEGER_LITERAL);
                    break;
                default:
                    jj_la1[22] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            arguments.add(t.image + (t2 == null ? "" : ("/" + t2.image)));
            t2 = null;
        }
        jj_consume_token(DOT);
        toHeap.addDirective(arguments);
    }

// A Prolog base is a series of rules.
    final public void Prolog() throws ParseException {
        label_7:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CHARACTER_LITERAL:
                case STD_IDENTIFIER:
                case LPAREN:
                case SEMICOLON:
                case NOTSPACE:
                case ADD:
                case RULEIMPLY:
                case SUBTRACT:
                case IMPLY:
                case MULTIPLY:
                case POWER:
                case DIVIDE:
                case BITAND:
                case UNIFICATION:
                case ARITHUNIF:
                case ARITHNOTUNIF:
                case EQLT:
                case TERMDECOMPOSITION:
                case EQUALS:
                case BACKSLASH:
                case NOT:
                case BITOR:
                case NOTUNIFIABLE:
                case NOTEQUALS:
                case TERMGTEQ:
                case TERMEQLT:
                case TERMLT:
                case TERMGT:
                case TERMEQ:
                case TERMNEQ:
                case LT:
                case SHIFTLEFT:
                case GT:
                case SHIFTRIGHT:
                case GTEQ:
                case ASSIGN:
                case POWER2:
                case XOR:
                case REMAINDER:
                case INTDIVIDE:
                case MODULO:
                case COLON:
                case NORMAND:
        ;
                    break;
                default:
                    jj_la1[23] = jj_gen;
                    break label_7;
            }
            if (jj_2_9(3)) {
                Directive();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case CHARACTER_LITERAL:
                    case STD_IDENTIFIER:
                    case LPAREN:
                    case SEMICOLON:
                    case NOTSPACE:
                    case ADD:
                    case RULEIMPLY:
                    case SUBTRACT:
                    case IMPLY:
                    case MULTIPLY:
                    case POWER:
                    case DIVIDE:
                    case BITAND:
                    case UNIFICATION:
                    case ARITHUNIF:
                    case ARITHNOTUNIF:
                    case EQLT:
                    case TERMDECOMPOSITION:
                    case EQUALS:
                    case BACKSLASH:
                    case NOT:
                    case BITOR:
                    case NOTUNIFIABLE:
                    case NOTEQUALS:
                    case TERMGTEQ:
                    case TERMEQLT:
                    case TERMLT:
                    case TERMGT:
                    case TERMEQ:
                    case TERMNEQ:
                    case LT:
                    case SHIFTLEFT:
                    case GT:
                    case SHIFTRIGHT:
                    case GTEQ:
                    case ASSIGN:
                    case POWER2:
                    case XOR:
                    case REMAINDER:
                    case INTDIVIDE:
                    case MODULO:
                    case COLON:
                    case NORMAND:
                        Rule();
                        break;
                    default:
                        jj_la1[24] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        }
        jj_consume_token(0);
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_3R_29() {
        if (jj_3R_33()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_28() {
        if (jj_3R_34()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_13() {
        if (jj_scan_token(BAR)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_28()) {
            jj_scanpos = xsp;
            if (jj_3R_29()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_41() {
        if (jj_scan_token(DIVIDE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_9() {
        if (jj_3R_15()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_38() {
        if (jj_scan_token(STD_IDENTIFIER)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_41()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_32() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_38()) {
            jj_scanpos = xsp;
            if (jj_scan_token(15)) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_15() {
        if (jj_scan_token(RULEIMPLY)) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_32()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_31() {
        if (jj_3R_33()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_30() {
        if (jj_3R_34()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_8() {
        if (jj_3R_10()) {
            return true;
        }
        if (jj_scan_token(RULEIMPLY)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_19() {
        if (jj_3R_34()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_14() {
        if (jj_scan_token(BAR)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_30()) {
            jj_scanpos = xsp;
            if (jj_3R_31()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_12() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_11()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_18() {
        if (jj_3R_33()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_33() {
        if (jj_scan_token(VAR_IDENTIFIER)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_17() {
        if (jj_3R_10()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_7() {
        if (jj_3R_11()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_14()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_6() {
        if (jj_3R_11()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_12()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_13()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_39() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_6()) {
            jj_scanpos = xsp;
            if (jj_3_7()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_27() {
        if (jj_3R_34()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_5() {
        if (jj_3R_9()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_34() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_39()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_35() {
        if (jj_3R_20()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_3R_33()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_37() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_11()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_16() {
        if (jj_3R_9()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_4() {
        if (jj_3R_8()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_8() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_16()) {
            jj_scanpos = xsp;
            if (jj_3R_17()) {
                jj_scanpos = xsp;
                if (jj_3R_18()) {
                    jj_scanpos = xsp;
                    if (jj_3R_19()) {
                        return true;
                    }
                }
            }
        }
        if (jj_3R_20()) {
            return true;
        }
        if (jj_3R_11()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_25() {
        if (jj_3R_10()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_11()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_9()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_20() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(31)) {
            jj_scanpos = xsp;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                if (jj_scan_token(34)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(35)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(36)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(37)) {
                                jj_scanpos = xsp;
                                if (jj_scan_token(38)) {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(39)) {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(40)) {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(41)) {
                                                jj_scanpos = xsp;
                                                if (jj_scan_token(42)) {
                                                    jj_scanpos = xsp;
                                                    if (jj_scan_token(43)) {
                                                        jj_scanpos = xsp;
                                                        if (jj_scan_token(44)) {
                                                            jj_scanpos = xsp;
                                                            if (jj_scan_token(45)) {
                                                                jj_scanpos = xsp;
                                                                if (jj_scan_token(47)) {
                                                                    jj_scanpos = xsp;
                                                                    if (jj_scan_token(48)) {
                                                                        jj_scanpos = xsp;
                                                                        if (jj_scan_token(49)) {
                                                                            jj_scanpos = xsp;
                                                                            if (jj_scan_token(50)) {
                                                                                jj_scanpos = xsp;
                                                                                if (jj_scan_token(51)) {
                                                                                    jj_scanpos = xsp;
                                                                                    if (jj_scan_token(52)) {
                                                                                        jj_scanpos = xsp;
                                                                                        if (jj_scan_token(53)) {
                                                                                            jj_scanpos = xsp;
                                                                                            if (jj_scan_token(54)) {
                                                                                                jj_scanpos = xsp;
                                                                                                if (jj_scan_token(55)) {
                                                                                                    jj_scanpos = xsp;
                                                                                                    if (jj_scan_token(56)) {
                                                                                                        jj_scanpos = xsp;
                                                                                                        if (jj_scan_token(57)) {
                                                                                                            jj_scanpos = xsp;
                                                                                                            if (jj_scan_token(58)) {
                                                                                                                jj_scanpos = xsp;
                                                                                                                if (jj_scan_token(59)) {
                                                                                                                    jj_scanpos = xsp;
                                                                                                                    if (jj_scan_token(60)) {
                                                                                                                        jj_scanpos = xsp;
                                                                                                                        if (jj_scan_token(61)) {
                                                                                                                            jj_scanpos = xsp;
                                                                                                                            if (jj_scan_token(62)) {
                                                                                                                                jj_scanpos = xsp;
                                                                                                                                if (jj_scan_token(63)) {
                                                                                                                                    jj_scanpos = xsp;
                                                                                                                                    if (jj_scan_token(64)) {
                                                                                                                                        jj_scanpos = xsp;
                                                                                                                                        if (jj_scan_token(65)) {
                                                                                                                                            jj_scanpos = xsp;
                                                                                                                                            if (jj_scan_token(66)) {
                                                                                                                                                jj_scanpos = xsp;
                                                                                                                                                if (jj_scan_token(67)) {
                                                                                                                                                    jj_scanpos = xsp;
                                                                                                                                                    if (jj_scan_token(70)) {
                                                                                                                                                        jj_scanpos = xsp;
                                                                                                                                                        if (jj_scan_token(30)) {
                                                                                                                                                            jj_scanpos = xsp;
                                                                                                                                                            if (jj_scan_token(27)) {
                                                                                                                                                                jj_scanpos = xsp;
                                                                                                                                                                if (jj_scan_token(46)) {
                                                                                                                                                                    jj_scanpos = xsp;
                                                                                                                                                                    if (jj_scan_token(32)) {
                                                                                                                                                                        return true;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_24() {
        if (jj_3R_9()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_22() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_11()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_37()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_36() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_11()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_40()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_21() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(19)) {
            jj_scanpos = xsp;
            if (jj_scan_token(17)) {
                jj_scanpos = xsp;
                if (jj_3R_35()) {
                    return true;
                }
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_36()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_3() {
        if (jj_scan_token(NOTSPACE)) {
            return true;
        }
        if (jj_3R_10()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_10() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_3()) {
            jj_scanpos = xsp;
            if (jj_3R_21()) {
                jj_scanpos = xsp;
                if (jj_3R_22()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_8()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_9() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(33)) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_scan_token(15)) {
            jj_scanpos = xsp;
            if (jj_scan_token(16)) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_23() {
        if (jj_3R_8()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_11() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_23()) {
            jj_scanpos = xsp;
            if (jj_3R_24()) {
                jj_scanpos = xsp;
                if (jj_3R_25()) {
                    jj_scanpos = xsp;
                    if (jj_3R_26()) {
                        jj_scanpos = xsp;
                        if (jj_3R_27()) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    /**
     * Generated Token Manager.
     */
    public ParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[25];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0xca3a0000, 0x0, 0x18000, 0xc80a0000, 0x10000000, 0x200000, 0x10000000, 0xc82a0000, 0xc8000000, 0xc83a0000, 0xca3a0000, 0x10000000, 0x2100000, 0x0, 0x2100000, 0x0, 0xca3b8000, 0x10000000, 0xc82a0000, 0x10000000, 0x88000, 0x0, 0x88000, 0xc82a0000, 0xc82a0000,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0xffffffff, 0x2, 0x0, 0xffffffff, 0x0, 0x0, 0x0, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffff, 0x0, 0xffffffff, 0x0, 0x0, 0x20, 0x0, 0xffffffff, 0xffffffff,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x4f, 0x0, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x4f, 0x4f, 0x4f, 0x4f, 0x0, 0x0, 0x10, 0x0, 0x10, 0x4f, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x4f, 0x4f,};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[9];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /**
     * Constructor with InputStream.
     */
    public Parser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public Parser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new ParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 25; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 25; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Constructor.
     */
    public Parser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new ParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 25; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void reset(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 25; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Constructor with generated Token Manager.
     */
    public Parser(ParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 25; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(ParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 25; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        if (jj_scanpos.kind != kind) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            throw jj_ls;
        }
        return false;
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            System.arraycopy(jj_lasttokens, 0, jj_expentry, 0, jj_endpos);
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[74];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 25; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 74; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 9; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {

        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
